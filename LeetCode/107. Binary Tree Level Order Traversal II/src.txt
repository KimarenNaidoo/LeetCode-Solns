public List<List<Integer>> levelOrderBottom(TreeNode root) {
        
        
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        List<Integer> list = new ArrayList<>();
        list.add(root.val);
        result.add(list);
        
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            
            for(int i = 0; i < size; i++){
                TreeNode current  = queue.poll();
                
                if(current.left != null){
                    queue.offer(current.left);
                    temp.add(current.left.val);
                }
                
                if(current.right != null){
                    queue.offer(current.right);
                    temp.add(current.right.val);
                }
            }
            
            if(temp.size() != 0) result.add(temp);
              
        }
        
        Collections.reverse(result);
        
        return result;
    }
}